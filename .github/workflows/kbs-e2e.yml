name: KBS e2e

on:
  workflow_call:
    inputs:
      tee:
        type: string
        required: true
      runs-on-build:
        type: string
        default: '["ubuntu-22.04"]'
        description: JSON representation of runner labels for build
      runs-on-test:
        type: string
        default: '["ubuntu-22.04"]'
        description: JSON representation of runner labels for test
      tarball:
        type: string
        description: Artifact containing checked out source from a prior job
        required: true
      kbs-client-features:
        type: string
        default: ""
        description: features for kbs-client

permissions:
  contents: read

# Self-hosted runners do not set -o pipefail otherwise
defaults:
  run:
    shell: bash

jobs:
  build-binaries:
    runs-on: ${{ fromJSON(inputs.runs-on-build) }}
    permissions:
      packages: write
    env:
      OS_VERSION: ubuntu-22.04
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0

    - name: Extract tarball
      run: tar xzf "./artifact/${INPUTS_TARBALL}"
      env:
        INPUTS_TARBALL: ${{ inputs.tarball }}

    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@fb51252c7ba57d633bc668f941da052e410add48 # v1.13.0
      with:
        components: rustfmt, clippy
        rustflags: ""
        cache: false

    - name: Set up rust build cache
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      continue-on-error: false
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          target/
        key: rust-${{ env.OS_VERSION }}-${{ hashFiles('./Cargo.lock') }}

    - name: Build bins
      working-directory: kbs/test
      run: |
        make install-dev-dependencies
        make bins "TEST_FEATURES=${INPUTS_KBS_CLIENT_FEATURES}"
      env:
        INPUTS_KBS_CLIENT_FEATURES: ${{ inputs.kbs-client-features }}

    - name: Archive test folder
      run: tar czf test.tar.gz kbs/test

    - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        path: test.tar.gz
        overwrite: true
        name: artifacts-${{ inputs.tee }}

  e2e-test:
    needs: build-binaries
    runs-on: ${{ fromJSON(inputs.runs-on-test) }}
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        name: artifacts-${{ inputs.tee }}

    - name: Extract test folder
      run: tar xzf ./test.tar.gz

    - name: Set up SGX/TDX certificates cache
      if: inputs.tee == 'aztdxvtpm'
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      with:
        path: .dcap-qcnl
        key: ${{ runner.os }}-dcap-qcnl

    - name: Install dependencies
      working-directory: kbs/test
      run: |
        sudo apt-get update
        sudo apt-get install -y make --no-install-recommends
        make install-dependencies

    - name: Set TPM permissions
      if: inputs.tee == 'aztdxvtpm' || inputs.tee == 'azsnpvtpm'
      run: |
        sudo chgrp tss /dev/tpm0
        sudo usermod -a -G tss "$USER"

    - name: Run e2e test
      working-directory: kbs/test
      env:
        TEE: ${{ inputs.tee }}
        RUST_LOG: warn
      run: make e2e-test
