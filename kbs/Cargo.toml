[package]
name = "kbs"
version.workspace = true
authors.workspace = true
description.workspace = true
documentation.workspace = true
edition.workspace = true

[features]
default = ["coco-as-builtin", "coco-as-grpc", "intel-trust-authority-as"]

# Support a backend attestation service for KBS
as = []

# Use CoCo-AS as backend attestation service
coco-as = ["as"]

# Use built-in CoCo-AS as backend attestation service
coco-as-builtin = ["coco-as", "attestation-service/default"]

# Use built-in CoCo-AS as backend attestation service without verifier
coco-as-builtin-no-verifier = ["coco-as", "attestation-service/rvps-builtin"]

# Use remote gRPC CoCo-AS as backend attestation service
coco-as-grpc = ["coco-as", "mobc", "tonic", "tonic-build", "prost"]

# Use Intel TA as backend attestation service
intel-trust-authority-as = ["as", "az-cvm-vtpm"]

# Use aliyun KMS as KBS backend
aliyun = ["kms/aliyun"]

# Use pkcs11 resource backend to store secrets in an HSM
pkcs11 = ["cryptoki"]

[dependencies]
actix-web = { workspace = true, features = ["openssl"] }
actix-web-httpauth.workspace = true
aes-gcm = "0.10.1"
anyhow.workspace = true
async-trait.workspace = true
attestation-service = { path = "../attestation-service", default-features = false, optional = true }
base64.workspace = true
cfg-if.workspace = true
clap = { workspace = true, features = ["derive", "env"] }
config.workspace = true
cryptoki = { version = "0.7.0", optional = true }
env_logger.workspace = true
jsonwebtoken = { workspace = true, default-features = false }
jwt-simple.workspace = true
kbs-types.workspace = true
kms = { workspace = true, default-features = false }
lazy_static = "1.4.0"
log.workspace = true
mobc = { version = "0.8.3", optional = true }
prost = { workspace = true, optional = true }
rand = "0.8.5"
regex = "1.11.1"
regorus.workspace = true
reqwest = { workspace = true, features = ["json"] }
rsa = { version = "0.9.2", features = ["sha2"] }
scc = "2"
semver = "1.0.16"
serde = { workspace = true, features = ["derive"] }
serde_json.workspace = true
strum.workspace = true
thiserror.workspace = true
time = { version = "0.3.23", features = ["std"] }
tokio.workspace = true
tonic = { workspace = true, optional = true }
uuid = { version = "1.2.2", features = ["serde", "v4"] }
openssl = "0.10.55"
az-cvm-vtpm = { version = "0.7.0", default-features = false, optional = true }
derivative = "2.2.0"

[dev-dependencies]
tempfile.workspace = true
rstest.workspace = true

[build-dependencies]
tonic-build = { workspace = true, optional = true }
